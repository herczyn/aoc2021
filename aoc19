arr = document.getElementsByTagName("pre")[0].innerText.split("\n").filter(function(n){return n;});

scanner = 0
scanners = [];
arr.forEach(function(row) {
	if (row.indexOf('scanner')>=0) {
		scanner = parseInt(row.split(" ")[2]);
		scanners[scanner] = []
	} else {
		scanners[scanner].push([parseInt(row.split(",")[0]),parseInt(row.split(",")[1]),parseInt(row.split(",")[2])])
	}
})

equal = function(scan1, scan2) {
	return scan1[0] == scan2[0] && scan1[1] == scan2[1] && scan1[2] == scan2[2];
}

common = function(scanner1, scanner2) {
	return scanner1.map(function(scan1) {
		return scanner2.find(function(scan2) {return equal(scan1, scan2)}) ? 1 : 0
	}).reduce(function(a,b){return a+b});
}

move = function(scanner, x, y, z) {
	return scanner.map(function(scan) {
		return [scan[0]+x, scan[1]+y, scan[2]+z];
	});
}

rotation = function(pos) {
	rot = [];
	rot[0] = (1+Math.floor(pos/8)) * ((Math.floor(pos/4) % 2 == 1) ? -1 : 1);
	pos = pos % 4;
	rot[1] = (1+Math.floor(pos/2)) * ((Math.floor(pos) % 2 == 1) ? -1 : 1);
	if (Math.abs(rot[1]) >= Math.abs(rot[0])) {
		rot[1] = (Math.abs(rot[1])+1) * rot[1] / Math.abs(rot[1])
	}
	rot[2] = (6-Math.abs(rot[0])-Math.abs(rot[1]));
	if (rot[0] / Math.abs(rot[0]) * rot[1] / Math.abs(rot[1]) * (Math.abs(rot[0])==2 ? -1 : 1) * (Math.abs(rot[2]) < Math.abs(rot[1]) ? -1 : 1) == -1) {
		rot[2]*=-1;
	}
	return rot;
}

rotate = function(scanner, pos) {
	rot = rotation(pos);
	return scanner.map(function(scan) {
		return [scan[Math.abs(rot[0])-1] * rot[0] / Math.abs(rot[0]), scan[Math.abs(rot[1])-1] * rot[1] / Math.abs(rot[1]), scan[Math.abs(rot[2])-1] * rot[2] / Math.abs(rot[2])]
	});
}

scannerPositions = [[0, 0, 0]];

commonAfterMove = function(scanner1, scanner2) {
	for (pos=0;pos<24;pos++) {
		rotated = rotate(scanner2, pos);
		for (i=0;i<scanner1.length;i++) {
			for (j=0;j<scanner2.length;j++) {
				moveX = scanner1[i][0] - rotated[j][0];
				moveY = scanner1[i][1] - rotated[j][1];
				moveZ = scanner1[i][2] - rotated[j][2];
				moved = move(rotated, moveX, moveY, moveZ);
				c = common(moved, scanner1)
				if (c>=12) {
					scannerPositions.push([moveX, moveY, moveZ]);
					return moved;
				}			
			}
		}
	}
	return false;
}

correctScanners = [0]
newCorrectScanners = [0]

while (newCorrectScanners.length>0) {
	newScanner = newCorrectScanners.pop();
	for (scannerToCheck=0; scannerToCheck < scanners.length; scannerToCheck++) {
		if (correctScanners.indexOf(scannerToCheck)<0) {
			isCommon = commonAfterMove(scanners[newScanner], scanners[scannerToCheck])
			if (isCommon) {
				correctScanners.push(scannerToCheck);
				newCorrectScanners.push(scannerToCheck);
				scanners[scannerToCheck] = isCommon;
			}
		}
	}
}

allBeacons = scanners.reduce(function(a,b){return a.concat(b)});
beaconNumber = allBeacons.filter(function(s, i) {
	return !allBeacons.find(function(z, j){
		return equal(s,z) && i>j
	})
});
maxDistance=0
for (i=0;i<scannerPositions.length;i++) {
	for (j=0;j<scannerPositions.length;j++) {
		distance = Math.abs(scannerPositions[i][0]-scannerPositions[j][0])+Math.abs(scannerPositions[i][1]-scannerPositions[j][1])+Math.abs(scannerPositions[i][2]-scannerPositions[j][2]);
		if (distance>maxDistance) {
			maxDistance = distance;
		}
	}
}
maxDistance